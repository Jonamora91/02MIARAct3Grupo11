\contentsline {section}{\numberline {1}Ejercicios acerca del determinante}{2}{section.1}
\contentsline {subsection}{\numberline {1.1}Desarrollo de Laplace.}{2}{subsection.1.1}
\contentsline {subsubsection}{\numberline {1.1.1}Deducir de la definición 4 el determinante en dimensión 0, 1 y 2.}{2}{subsubsection.1.1.1}
\contentsline {paragraph}{Dimensión 0}{2}{section*.2}
\contentsline {paragraph}{Dimensión 1}{3}{section*.3}
\contentsline {paragraph}{Dimensión 2}{3}{section*.4}
\contentsline {subsubsection}{\numberline {1.1.2}A partir de la definición 4, expresar el determinante de una matriz cuadrada recursivamente en función de determinantes la matrices cuadradas de dimensión inferior.}{3}{subsubsection.1.1.2}
\contentsline {subsubsection}{\numberline {1.1.3}Implementar en Python la definición así obtenida.}{5}{subsubsection.1.1.3}
\contentsline {subsection}{\numberline {1.2}Ejercicio 2 : Eliminación de Gauss--Jordan.}{8}{subsection.1.2}
\contentsline {subsubsection}{\numberline {1.2.1}Deducir de la definición 4 el efecto que tiene en el determinante de una matriz sumar a una de sus columnas una combinación lineal de las demás.}{8}{subsubsection.1.2.1}
\contentsline {subsubsection}{\numberline {1.2.2}A partir de la definición 4, proponer una estrategia para triangularizar una matriz sin cambiar su determinante e implementar en Python una definición alternativa del determinante. Indicación: descomponer similarmente al ejercicio anterior.}{8}{subsubsection.1.2.2}
\contentsline {subsubsection}{\numberline {1.2.3}Implementar en Python la definición así obtenida}{8}{subsubsection.1.2.3}
\contentsline {subsection}{\numberline {1.3}Ejercicio 3: Comparación.}{8}{subsection.1.3}
\contentsline {subsubsection}{\numberline {1.3.1}Obtener la complejidad computacional de cada una de estas dos implementaciones.}{8}{subsubsection.1.3.1}
\contentsline {subsubsection}{\numberline {1.3.2}Generar matrices aleatoriamente en dimensión \(n ∈\) \{ 2, 3, · · , 9, 10 \} y comparar el tiempo de ejecución de cada una de estas dos implementaciones con la función numpy.linalg.det (la función determinante de la extensión numérica de Python al álgebra lineal). Indicación: se puede utilizar la función numpy.random.rand para generar los coeficientes aleatorios de sus matrices.}{9}{subsubsection.1.3.2}
\contentsline {section}{\numberline {2}Ejercicios acerca del gradiente}{11}{section.2}
\contentsline {subsection}{\numberline {2.1}Ejercicio 4 : Método descenso del gradiente}{11}{subsection.2.1}
\contentsline {subsubsection}{\numberline {2.1.1}Implementar en Python un algoritmo de descenso del gradiente (con un máximo de m = \(10⁵\) iteraciones) a partir de los siguientes argumentos tomados en ese orden:}{11}{subsubsection.2.1.1}
\contentsline {subsubsection}{\numberline {2.1.2}Calcular formalmente \(\{ 𝑡 ∈ R. 𝑓 ′(𝑡) = 0 \}\) para \(𝑓 : 𝑡 ↦ 3𝑡⁴+4𝑡³−12𝑡²+7\).}{13}{subsubsection.2.1.2}
\contentsline {subsubsection}{\numberline {2.1.3}Con una tolerancia \(z = 10⁻¹²\) y un valor inicial de \(x = 3\) aplicar su algoritmo con razón \(y = 10⁻¹\), \(10⁻²\), \(10⁻³\) luego hacer lo mismo con \(x = 0\). Interpretar el resultado.}{15}{subsubsection.2.1.3}
\contentsline {subsubsection}{\numberline {2.1.4}\hyperref [toc0_]{Repetir estos dos últimos apartados con 𝑓 : (𝑠, 𝑡) ↦ 𝑠² + 3𝑠𝑡 + 𝑡³ + 1 y los valores iniciales x = [-1,1], [0,0].}}{19}{subsubsection.2.1.4}
